const { ethers, JsonRpcProvider } = require("ethers");

const provider = new JsonRpcProvider("http://127.0.0.1:8545");
let signer = new ethers.Wallet("0xD196DCA836F8AC2FFF45B3C9F0113825CCBB33FA1B39737B948503B263ED75AE", provider);

const abi =[{"inputs":[],"name":"requestDeposit","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"getResult","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"results","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}];
//字节码
const bytecode = '6080604052348015600f57600080fd5b506108938061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063446a37e014610046578063b03c67aa14610076578063ef378f6214610094575b600080fd5b610060600480360381019061005b91906103e0565b6100c4565b60405161006d919061049d565b60405180910390f35b61007e610194565b60405161008b91906104d8565b60405180910390f35b6100ae60048036038101906100a991906103e0565b6102dd565b6040516100bb919061049d565b60405180910390f35b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461010f90610522565b80601f016020809104026020016040519081016040528092919081815260200182805461013b90610522565b80156101885780601f1061015d57610100808354040283529160200191610188565b820191906000526020600020905b81548152906001019060200180831161016b57829003601f168201915b50505050509050919050565b600080600061080973ffffffffffffffffffffffffffffffffffffffff167f3504af4a32535a8b4c607f46bc4ff6e005ea993b3fd9a8f49e980b79d07e14f1604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610243919061058f565b6000604051808303816000865af19150503d8060008114610280576040519150601f19603f3d011682016040523d82523d6000602084013e610285565b606091505b50915091508060008061011173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816102d7919061078b565b50505090565b600060205280600052604060002060009150905080546102fc90610522565b80601f016020809104026020016040519081016040528092919081815260200182805461032890610522565b80156103755780601f1061034a57610100808354040283529160200191610375565b820191906000526020600020905b81548152906001019060200180831161035857829003601f168201915b505050505081565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ad82610382565b9050919050565b6103bd816103a2565b81146103c857600080fd5b50565b6000813590506103da816103b4565b92915050565b6000602082840312156103f6576103f561037d565b5b6000610404848285016103cb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044757808201518184015260208101905061042c565b60008484015250505050565b6000601f19601f8301169050919050565b600061046f8261040d565b6104798185610418565b9350610489818560208601610429565b61049281610453565b840191505092915050565b600060208201905081810360008301526104b78184610464565b905092915050565b6000819050919050565b6104d2816104bf565b82525050565b60006020820190506104ed60008301846104c9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061053a57607f821691505b60208210810361054d5761054c6104f3565b5b50919050565b600081905092915050565b60006105698261040d565b6105738185610553565b9350610583818560208601610429565b80840191505092915050565b600061059b828461055e565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826105fa565b61064186836105fa565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061068861068361067e84610659565b610663565b610659565b9050919050565b6000819050919050565b6106a28361066d565b6106b66106ae8261068f565b848454610607565b825550505050565b600090565b6106cb6106be565b6106d6818484610699565b505050565b5b818110156106fa576106ef6000826106c3565b6001810190506106dc565b5050565b601f82111561073f57610710816105d5565b610719846105ea565b81016020851015610728578190505b61073c610734856105ea565b8301826106db565b50505b505050565b600082821c905092915050565b600061076260001984600802610744565b1980831691505092915050565b600061077b8383610751565b9150826002028217905092915050565b6107948261040d565b67ffffffffffffffff8111156107ad576107ac6105a6565b5b6107b78254610522565b6107c28282856106fe565b600060209050601f8311600181146107f557600084156107e3578287015190505b6107ed858261076f565b865550610855565b601f198416610803866105d5565b60005b8281101561082b57848901518255600182019150602085019450602081019050610806565b868310156108485784890151610844601f891682610751565b8355505b6001600288020188555050505b50505050505056fea26469706673582212200f50858973fc7e479c1d723390a3b9a9d129b357fd883139af0333fba792bf3764736f6c63430008190033';


console.log("signer:",signer.address);


(async () => {

    const blockNumber = await provider.getBlockNumber();
    console.log("blockNumber:", blockNumber);

    const balance = await provider.getBalance("0x3e108c058e8066da635321dc3018294ca82ddedf");
    console.log("balance:", balance);

    const feeData = await provider.getFeeData();
    console.log("feeData:", feeData);

    const nonce = await provider.getTransactionCount("0x3e108c058e8066da635321dc3018294ca82ddedf");
    console.log("nonce:", nonce);
})();


const contractAddress = '0xCF21f8035a55232121A957E2D6D0fBe15A137B96'; // 已部署合约的地址

// 调用合约方法
// 调用 requestDeposit 方法
const address = ethers.hexlify("0x0000000000000000000000000000000000000111"); // 替换为合适的值


// 调用合约的 getResult 函数并打印结果
async function getResult() {
    // 创建合约实例
    const contract = new ethers.Contract(contractAddress, abi, provider);

    // 调用 getResult 函数
    const result = await contract.getResult("0x0000000000000000000000000000000000000111");

    console.log("read Result:", result);
}

getResult().catch(console.error);


// 调用合约的 write 函数
async function writeData() {
    // 创建合约实例
    const contract = new ethers.Contract(contractAddress, abi,signer );
    res =  await contract.requestDeposit()
    console.log("write Result:", res.hash);
    // 等待交易被打包，获取收据
    const receipt = await provider.waitForTransaction(res.hash);
    console.log("Receipt:", receipt.status);
}
//Status： 成功与否，1表示成功，0表示失败
writeData().catch(console.error);